#version 450
#extension GL_ARB_separate_shader_objects : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : require
#extension GL_KHR_shader_subgroup_arithmetic : require
// #extension VK_EXT_validation_features : require

#define LOCAL_SIZE 512
#define LOCAL_SIZE_POWER 9
#define WARP_COUNT LOCAL_SIZE / 32


#include "structs.inl"

layout(std430, set = 1, binding = 0) buffer readonly LightsIn
{
	Light lightsIn[];
};

layout(std430, set = 1, binding = 1) buffer readonly Lights
{
	Key data[];
} lights;

layout(std430, set = 1, binding = 2) buffer BVH
{
	Node nodes[];
} bvh;

layout(std430, set = 1, binding = 2) buffer writeonly Keys
{
	uint keys[];
};

layout(push_constant) uniform pushConstants 
{
	uint count;
	uint offset;
	uint nextOffset;
};

layout(local_size_x = LOCAL_SIZE) in;
void main()
{
	// discard warps out of bounds
	if ((gl_GlobalInvocationID.x & ~(gl_SubgroupSize - 1)) >= count)
		return;
	
	Node node;
	if (offset == 0) // first pass
	{
		uint ii = (gl_GlobalInvocationID.x < count) ? gl_GlobalInvocationID.x : count - 1;
		ii = lights.data[ii].lightIndex;

		keys[gl_GlobalInvocationID.x] = ii;
		node.min = subgroupMin(lightsIn[ii].position - lightsIn[ii].radius);
		node.max = subgroupMax(lightsIn[ii].position + lightsIn[ii].radius);
	}
	else
	{
		uint ii = (gl_GlobalInvocationID.x < count) ? gl_GlobalInvocationID.x + offset : count - 1 + offset;
		node = bvh.nodes[ii];
		node.min = subgroupMin(node.min);
		node.max = subgroupMax(node.max);
	}

	if (subgroupElect())
		bvh.nodes[gl_GlobalInvocationID.x / gl_SubgroupSize + nextOffset] = node;
}