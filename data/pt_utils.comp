#define PAGE_SIZE 4096
#define PAGE_SIZE_POWER 12
#define NEAR 0.05
#define FAR 100

layout(set = 0, binding = 0) uniform CameraUBO
{
	mat4 view;
	mat4 proj;
	mat4 invProj;
	vec3 position;
	uvec2 screenSize;
} camera;

// Returns Â±1
vec2 signNotZero(vec2 v) 
{
	return vec2((v.x >= 0.0) ? 1.0 : -1.0, (v.y >= 0.0) ? 1.0 : -1.0);
}

vec3 octToFloat32x3(vec2 e) 
{
	vec3 v = vec3(e.xy, 1.0 - abs(e.x) - abs(e.y));

	if (v.z < 0) 
		v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);

	return normalize(v);
}

uint addressTranslate(uint virtualAddress)
{
	uint pageNumber = virtualAddress / PAGE_SIZE;
	uint pageAddress = (table.nodes[pageNumber] - 1) * PAGE_SIZE;
	uint offset = virtualAddress % PAGE_SIZE;

	return pageAddress + offset;
}

uint packKey(uvec3 key)
{
	return key.x | key.y << 7 | (key.z & 0x1FF) << 14;
}

float getViewDepth(float projDepth)
{
	float normalizedProjDepth = projDepth * 2.0 - 1.0;
	// return 1.0 / (normalizedProjDepth * camera.invProj[2][3] + camera.invProj[3][3]);
	return camera.proj[3][2] / (normalizedProjDepth + camera.proj[2][2]);
}