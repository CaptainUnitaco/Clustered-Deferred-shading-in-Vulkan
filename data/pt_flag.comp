#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive : enable

layout (constant_id = 0) const int TILE_SIZE = 0;
layout (constant_id = 1) const float Y_SLICES = 0.0;
layout (constant_id = 2) const uint LOCAL_SIZE = 32;

layout(set = 1, binding = 3) uniform sampler2D samplerDepth;

layout(std430, set = 1, binding = 4) buffer PageTable
{
	uint counter;
	uint pad0; // pad for indirect dispatch
	uint pad1;

	uint nodes[];
} table;

#include "pt_utils.comp"


layout(local_size_x_id = 2, local_size_y_id = 2) in;
void main()
{
	if (TILE_SIZE <= 32)
	{
		if (gl_GlobalInvocationID.x >= camera.screenSize.x || gl_GlobalInvocationID.y >= camera.screenSize.y)
			return;

		uvec2 tileID = gl_WorkGroupID.xy;
		float depth = getViewDepth(texelFetch(samplerDepth, ivec2(gl_GlobalInvocationID.xy), 0).r);
		uint k = uint(log(depth / NEAR) / Y_SLICES); 

		uint address = packKey(uvec3(tileID, k));
		table.nodes[address >> PAGE_SIZE_POWER] = 1;
	}
	else
	{
		int iter = TILE_SIZE / 32;
		uvec2 tileID = gl_WorkGroupID.xy;

		for (int x = 0; x < iter; x++)
		{
			for (int y = 0; y < iter; y++)
			{
				ivec2 dimension = ivec2((gl_WorkGroupID * iter + ivec3(x, y, 0)) * 32 + gl_LocalInvocationID);
				if (dimension.x >= camera.screenSize.x || dimension.y >= camera.screenSize.y)
					continue;

				float depth = getViewDepth(texelFetch(samplerDepth, dimension, 0).r);
				uint k = uint(log(depth / NEAR) / Y_SLICES); 

				uint address = packKey(uvec3(tileID, k));
				table.nodes[address >> PAGE_SIZE_POWER] = 1;
			}
		}
	}
}