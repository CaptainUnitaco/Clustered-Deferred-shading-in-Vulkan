#version 450
#extension GL_ARB_separate_shader_objects : enable

#define TILE_SIZE 32 // TODO bake it with compilation or w/e
#define MAX_TILE_LIGHTS 1024

// ------------- STRUCTS -------------
struct Light
{
	vec3 position;
	float radius;
	vec3 intensity;
	float pad;
};

struct LightOut
{
	uint count;
	uint lights[MAX_TILE_LIGHTS];
};

struct ViewFrustum
{
	vec3 plane[4];
	float minDepth;
	float maxDepth;
};

// ------------- LAYOUTS -------------
layout(set = 0, binding = 0) uniform CameraUBO
{
	mat4 view;
	mat4 proj;
	mat4 invProj;
	vec3 position;
} camera;

layout(std430, set = 1, binding = 0) buffer readonly LightsIn
{
	uvec3 lightCount_screenSize;
	uint pad;
	Light lightsIn[];
};

layout(std430, set = 1, binding = 1) buffer writeonly LightsOut
{
	LightOut lightsOut[];
};

layout(set = 1, binding = 2) uniform sampler2D samplerDepth;

// ------------- VARIABLES -------------
shared ViewFrustum frustum;
shared uint visibleLightCount;
shared uint visibleLights[MAX_TILE_LIGHTS];
shared uint minDepth;
shared uint maxDepth;

ViewFrustum createFrustum(uvec2 tileID, uvec2 tileCount)
{
	ViewFrustum frustum;
	frustum.maxDepth = -uintBitsToFloat(maxDepth);
	frustum.minDepth = -uintBitsToFloat(minDepth);

	// vec2 step = 2.0 * vec2(1.0, 1.0) / vec2(tileCount);
	vec2 step = 2.0 * vec2(TILE_SIZE, TILE_SIZE) / vec2(tileCount * TILE_SIZE);
	// vec2 step = 2.0 * vec2(TILE_SIZE, TILE_SIZE) / vec2(lightCount_screenSize.yz);
	vec4 ndc[4];
	
	ndc[0] = vec4(step * tileID - 1.0, 1.0, 1.0); // top left	
	ndc[1] = vec4(ndc[0].x, ndc[0].y + step.y, 1.0, 1.0); // bottom left
	ndc[2] = vec4(ndc[0].x + step.x, ndc[1].y, 1.0, 1.0); // botom right
	ndc[3] = vec4(ndc[2].x, ndc[0].y, 1.0, 1.0); // top right

	for (uint i = 0; i < 4; i++) 
	{
		ndc[i] = camera.invProj * ndc[i];
		ndc[i] /= ndc[i].w;
	}

	for (uint i = 0; i < 4; i++)
		frustum.plane[i] = normalize(cross(ndc[i].xyz, ndc[(i + 1) & 3].xyz));

	return frustum;
}

bool collides(uint index)
{
	vec3 position = (camera.view * vec4(lightsIn[index].position, 1.0)).xyz;
	float radius = lightsIn[index].radius;
	
	for (uint i = 0; i < 4; i++) 
	{
		float distance = dot(frustum.plane[i], position);

		if (distance > radius) 
			return false;
	}

	if (frustum.maxDepth - position.z > radius || position.z - frustum.minDepth > radius)
		return false;

	return true;
}


layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;
void main ()
{
	if (gl_LocalInvocationIndex == 0)
	{
		minDepth = 0xFFFFFFFF;
		maxDepth = 0;
		visibleLightCount = 0;
	}

	barrier();

	// --- depth for current tile ---
	// check if tile isn't out of screenSpace, if screen size isn't multiple of TILE_SIZE
	if (gl_GlobalInvocationID.x < lightCount_screenSize.y && gl_GlobalInvocationID.y < lightCount_screenSize.z)
	{
		float depth = texelFetch(samplerDepth, ivec2(gl_GlobalInvocationID.xy), 0).r;
		depth = 1.0 / (depth * camera.invProj[2][3] + camera.invProj[3][3]);
		
		uint depthInt = floatBitsToUint(depth);
		atomicMin(minDepth, depthInt);
		atomicMax(maxDepth, depthInt);
	}

	barrier();

	// --- create frustum ---
	if (gl_LocalInvocationIndex == 0)
		frustum = createFrustum(gl_WorkGroupID.xy, gl_NumWorkGroups.xy);

	barrier();

	// --- light culling ---
	uint threadCount = TILE_SIZE * TILE_SIZE;
	for (uint lightNum = gl_LocalInvocationIndex; lightNum < lightCount_screenSize.x && visibleLightCount < MAX_TILE_LIGHTS; lightNum += threadCount)
	{
		if (collides(lightNum))
		{
			uint index = atomicAdd(visibleLightCount, 1);

			if (index < MAX_TILE_LIGHTS)
				visibleLights[index] = lightNum;
		}
	}

	barrier();

	// --- copy visible lights to global memory ---
	uint index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	if (gl_LocalInvocationIndex == 0)
	{
		visibleLightCount = min(visibleLightCount, MAX_TILE_LIGHTS);
		lightsOut[index].count = visibleLightCount;
	}

	barrier();

	for (uint lightNum = gl_LocalInvocationIndex; lightNum < visibleLightCount; lightNum += threadCount)
	{
		lightsOut[index].lights[lightNum] = visibleLights[lightNum];
	}

}