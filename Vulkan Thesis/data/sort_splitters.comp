#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : require

// ------------- STRUCTS -------------
#include "structs.inl"

layout(std430, set = 1, binding = 0) buffer LightsIn
{
	uvec3 lightCount_screenSize;
	uint pad;
	Light lightsIn[];
};

layout(std430, set = 1, binding = 7) buffer Splitters
{
	uint splitters[];
};

shared uint mortons[1016];

layout(local_size_x = 1016) in;
void main()
{
	// load all
	uint lightIndex = splitters[gl_LocalInvocationIndex].lightIndex;
	uint myMorton = lightsIn[lightIndex].mortonCode;

	mortons[gl_LocalInvocationIndex] = myMorton;
	barrier();

	// test quasi prefix sum
	uint offset = 0;
	for (uint i = 0; i < 1016; i += 8)
	{
		[[unroll]]
		for (uint x = 0; x < 8; x++)
		{
			if (i + x < gl_LocalInvocationIndex)
				offset += uint(myMorton >= mortons[i + x]);
			else
				offset += uint(myMorton > mortons[i + x]);
		}
	}

	// write every eight
	if ((offset & 0x7) == 6)
		splitters[offset >> 3] = myMorton;

	if (gl_LocalInvocationIndex == 0)
		splitters[127] = 0xFFFFFFFF;
}

// void main()
// {
// 	uint tid = gl_LocalInvocationIndex;
// 	uint warpID = tid >> 5;
// 	uint warpOffset = (128) * warpID;

// 	uint localTid = gl_LocalInvocationIndex & 0x1F;
// 	uint subgroupReverseInvocationID = 31 - localTid;
// 	uint sharedWarpOffset = 128 * warpID;
// 	uint globalOffset = offset + warpOffset + localTid;

// 	// load 128keys per warp
// 	keys[sharedWarpOffset + 32 + subgroupReverseInvocationID] = splitters[warpOffset + localTid];
// 	keys[sharedWarpOffset + subgroupReverseInvocationID] = splitters[warpOffset + 32 + localTid];
// 	keys[sharedWarpOffset + 64 + localTid] = splitters[warpOffset + 64 + localTid];
// 	keys[sharedWarpOffset + 96 + localTid] = splitters[warpOffset + 96 + localTid];

// 	// merge down
// 	for (uint phase = 1; phase < 4; phase++)
// 	{
// 		uint sharedWarpOffset = (128 << phase) * warpID;
// 		bool readFromSwap = (phase & 1) == 1;

// 		// warps out of bounds can early exit
// 		if (sharedWarpOffset > 1024)
// 			return;

// 		uint aMax;
// 		uint bMax;
// 		bool swapAB = false;

// 		if (readFromSwap)
// 		{
// 			aMax = swap[sharedWarpOffset].mortonCode;
// 			bMax = swap[sharedWarpOffset + 127].mortonCode;
// 		}
// 		else
// 		{
// 			aMax = keys[sharedWarpOffset].mortonCode;
// 			bMax = keys[sharedWarpOffset + 127].mortonCode;
// 		}

// 		bitonicWarpLastPhase(sharedWarpOffset, sharedWarpOffset + 64, readFromSwap);

// 		swap[warpOffset + localTid] = keys[sharedWarpOffset + localTid];
// 		swap[warpOffset + localTid + 32] = keys[sharedWarpOffset + localTid + 32];

// 		uint ai = 1;
// 		uint bi = 1;
// 		while (ai + bi < (4 << phase))
// 		{
// 			bool loadA = false;

// 			if (aMax < bMax)
// 			{
// 				if (ai < (2 << phase)) loadA = true;
// 			}
// 			else
// 			{
// 				if (bi >= (2 << phase)) loadA = true;
// 			}

// 			if (loadA)
// 			{
// 				if (readFromSwap)
// 					aMax = swap[sharedWarpOffset + (64 << ai)].mortonCode;
// 				else
// 					aMax = keys[sharedWarpOffset + (64 << ai)].mortonCode;

// 				ai++;
// 			}
// 			else
// 			{
// 				if (readFromSwap)
// 					bMax = swap[sharedWarpOffset + (64 << bi)].mortonCode;
// 				else
// 					bMax = keys[sharedWarpOffset + (64 << bi)].mortonCode;

// 				bi++;
// 			}

// 			uint offsetA = sharedWarpOffset + 64 * (ai - 1);
// 			uint offsetB = sharedWarpOffset + 64 * (bi - 1) + (sharedWarpOffset >> 1);
// 			if (swapAB)
// 			{
// 				bitonicWarpLastPhase(offsetB, offsetA, readFromSwap);
// 				swapAB = false;
// 			}
// 			else
// 			{
// 				bitonicWarpLastPhase(offsetA, offsetB, readFromSwap);
// 				swapAB = true;
// 			}

// 			if (readFromSwap)
// 			{
// 				keys[64 * (ai + bi - 1) + localTid] = swap[(swapAB ? offsetA : offsetB) + localTid];
// 				keys[64 * (ai + bi - 1) + 32 + localTid] = swap[(swapAB ? offsetA : offsetB) + 32 + localTid];
// 			}
// 			else
// 			{
// 				swap[64 * (ai + bi - 1) + localTid] = keys[(swapAB ? offsetA : offsetB) + localTid];
// 				swap[64 * (ai + bi - 1) + 32 + localTid] = keys[(swapAB ? offsetA : offsetB) + 32 + localTid];
// 			}
// 		}

// 		if (readFromSwap)
// 		{
// 			keys[64 * (ai + bi - 1) + localTid] = swap[(swapAB ? offsetA : offsetB) + localTid];
// 			keys[64 * (ai + bi - 1) + 32 + localTid] = swap[(swapAB ? offsetA : offsetB) + 32 + localTid];
// 		}
// 		else
// 		{
// 			swap[64 * (ai + bi - 1) + localTid] = keys[(swapAB ? offsetA : offsetB) + localTid];
// 			swap[64 * (ai + bi - 1) + 32 + localTid] = keys[(swapAB ? offsetA : offsetB) + 32 + localTid];
// 		}

// 		barrier();
// 	}
// }

// void bitonicWarpLastPhase(uint offsetA, uint offsetB, bool useSwap)
// {
// 	uint tid = gl_LocalInvocationIndex & 0x1F;

// 	for(uint j = 64; j > 0; j >>= 1)
// 	{
// 		uint jTid = tid & (j - 1);
// 		uint jMultp = tid / j;

// 		uint index = jTid + jMultp * (j << 1) + offset;

// 		uint key1; uint key2;
// 		if (useSwap)
// 		{
// 			key1 = swap[offsetA].mortonCode;
// 			key2 = swap[offsetB].mortonCode;
// 		}
// 		else
// 		{
// 			key1 = keys[offsetA].mortonCode;
// 			key2 = keys[offsetB].mortonCode;
// 		}

// 		if (key1 > key2)
// 		{
// 			Key temp = key1;
// 			key1 = key2;
// 			key2 = temp;
// 		}

// 		index += (j == 64) ? 32 : 64;

// 		if (useSwap)
// 		{
// 			key1 = swap[offsetA].mortonCode;
// 			key2 = swap[offsetB].mortonCode;
// 		}
// 		else
// 		{
// 			key1 = keys[offsetA].mortonCode;
// 			key2 = keys[offsetB].mortonCode;
// 		}

// 		if (key1 > key2)
// 		{
// 			Key temp = key1;
// 			key1 = key2;
// 			key2 = temp;
// 		}
// 	}
// }
